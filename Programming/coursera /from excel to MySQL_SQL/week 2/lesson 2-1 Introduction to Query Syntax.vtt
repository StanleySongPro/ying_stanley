WEBVTT

1
00:00:04.141 --> 00:00:06.908
Some of you taking this course
may have never programmed or

2
00:00:06.908 --> 00:00:09.110
seen a command line before.

3
00:00:09.110 --> 00:00:11.150
Others of you may have
programmed quite a bit, but

4
00:00:11.150 --> 00:00:13.990
are used to programming languages
where you have to tell a programmer to

5
00:00:13.990 --> 00:00:16.680
exactly how to arrive at
the outcome you want.

6
00:00:16.680 --> 00:00:19.550
In both of these cases SQL or
Structured Query Language,

7
00:00:19.550 --> 00:00:21.950
will be a little different
than what you are used to.

8
00:00:21.950 --> 00:00:25.160
So this video is going to orient you to
the general structure of how you write

9
00:00:25.160 --> 00:00:25.860
an SQL query.

10
00:00:27.520 --> 00:00:30.230
SQL has commands from many
different aspects of creating and

11
00:00:30.230 --> 00:00:31.720
manipulating a database.

12
00:00:31.720 --> 00:00:34.700
But since you're rarely be given
information to change stored data as

13
00:00:34.700 --> 00:00:40.470
a data analyst, we will exclusively cover
DQL or Data Query Language, part of SQL.

14
00:00:41.720 --> 00:00:44.770
This part of a language that allows you
to retrieve data from the database in

15
00:00:44.770 --> 00:00:46.720
whatever format you want.

16
00:00:46.720 --> 00:00:49.070
Every time you want to
retrieve data from a database,

17
00:00:49.070 --> 00:00:53.110
you will need to write some lines of SQL
code that describe the data you desire.

18
00:00:53.110 --> 00:00:55.200
These lines of code
are collectively called a query.

19
00:00:55.200 --> 00:00:59.300
You will have to enter these queries of
code into some kind of interface that

20
00:00:59.300 --> 00:01:01.310
allows you to communicate
with the database.

21
00:01:01.310 --> 00:01:04.440
These interfaces are often called
front end of the database.

22
00:01:04.440 --> 00:01:07.930
Front end interfaces or user interfaces.

23
00:01:07.930 --> 00:01:11.020
Front end interfaces vary widely
from company to company and

24
00:01:11.020 --> 00:01:12.700
platform to platform.

25
00:01:12.700 --> 00:01:15.490
Some interfaces give you lots of options,
will have icons and

26
00:01:15.490 --> 00:01:18.000
organizations that are similar
to what you're used to

27
00:01:18.000 --> 00:01:21.060
when you were using the operating
system on your desktop.

28
00:01:21.060 --> 00:01:24.780
Others are nothing more than a black
window containing a blinking cursor.

29
00:01:24.780 --> 00:01:27.540
Be prepared to get comfortable with
any of these types of interfaces

30
00:01:27.540 --> 00:01:29.180
because you never know what
you're going to get and

31
00:01:29.180 --> 00:01:30.730
what you're going to have
to use in your own company.

32
00:01:31.760 --> 00:01:35.490
Despite the fact that interfaces differ,
they all have some kind of commandline or

33
00:01:35.490 --> 00:01:36.590
command window.

34
00:01:36.590 --> 00:01:40.050
This is where you will
actually write SQL queries.

35
00:01:40.050 --> 00:01:43.580
The data you retrieve when queries are
executed will usually be either provided

36
00:01:43.580 --> 00:01:47.350
immediately underneath the command or may
appear in a separate part of the screen or

37
00:01:47.350 --> 00:01:49.440
a separate window of the interface.

38
00:01:49.440 --> 00:01:52.670
In most cases, you will have to write some
extra commands, or at least press some

39
00:01:52.670 --> 00:01:55.920
extra buttons, in order to turn the data
you retrieve into text files or

40
00:01:55.920 --> 00:02:00.020
formats that can be read into outside
programs outside the database.

41
00:02:00.020 --> 00:02:03.610
The queries you write must
all conform to SQL syntax.

42
00:02:03.610 --> 00:02:05.980
All queries start with a verb, SELECT.

43
00:02:07.020 --> 00:02:09.900
The word SELECT is followed by
clauses that identify the data and

44
00:02:09.900 --> 00:02:12.810
database you want to work with and
to provide some more details

45
00:02:12.810 --> 00:02:15.360
about exactly what data you want and
what format you want them in.

46
00:02:16.390 --> 00:02:20.900
You provide these details using six
main SQL keywords in a certain order.

47
00:02:20.900 --> 00:02:28.050
The key words in their order are select,
from, where, group, having, and order.

48
00:02:29.340 --> 00:02:31.630
Only the first two keywords are required.

49
00:02:31.630 --> 00:02:34.470
The rest are optional and
only used when you need them.

50
00:02:34.470 --> 00:02:36.798
You usually end your
query with a semi colon.

51
00:02:36.798 --> 00:02:40.560
Semi colons aren't always necessary but
since they are sometimes required,

52
00:02:40.560 --> 00:02:43.120
it's good to get in the habit of always
ending your queries with a semi colon.

53
00:02:44.390 --> 00:02:47.650
One thing you might be able to infer from
these keywords is that there is nothing in

54
00:02:47.650 --> 00:02:51.080
an SQL query that tells a database
how to implement a query.

55
00:02:51.080 --> 00:02:53.780
Rather, queries let you
describe the dat you want.

56
00:02:53.780 --> 00:02:56.300
And then it's up to the database
management system to plan,

57
00:02:56.300 --> 00:02:58.920
optimize and carry out the physical
operations necessary to

58
00:02:58.920 --> 00:03:00.920
produce the result of the query.

59
00:03:00.920 --> 00:03:04.240
This property of queries reflects
the fundamental characteristic

60
00:03:04.240 --> 00:03:06.760
of how relational databases
are organized and used.

61
00:03:08.110 --> 00:03:10.230
When you fill out the general
keyword structure of a query,

62
00:03:10.230 --> 00:03:13.840
it will sound a little like you are
speaking an abbreviated form of English.

63
00:03:13.840 --> 00:03:17.720
Select the data you want,
from the database and

64
00:03:17.720 --> 00:03:21.210
tables you want,
where the following conditions are met.

65
00:03:21.210 --> 00:03:24.890
Group by this field
having this property and

66
00:03:24.890 --> 00:03:29.440
then order by this field or list
further similar to writing an English.

67
00:03:29.440 --> 00:03:31.600
You can write your entire
query on one line and

68
00:03:31.600 --> 00:03:34.600
the data management system
will still execute it.

69
00:03:34.600 --> 00:03:38.965
In addition SQL keywords are not key
sensitive so you could even write them all

70
00:03:38.965 --> 00:03:42.530
in lower case so that your query ends
up looking like a lot like sense.

71
00:03:42.530 --> 00:03:46.600
That said in most SQL interfaces,
extra wide spaces are usually ignored,

72
00:03:46.600 --> 00:03:49.700
unless they're within a string of text and
casing quotation marks.

73
00:03:49.700 --> 00:03:53.030
So that's a little different than how
we perceive spaces in written english.

74
00:03:53.030 --> 00:03:55.710
In addition, queries can get
pretty complicated and long.

75
00:03:55.710 --> 00:03:59.310
So you will often want to save them and
have them reviewed by other people.

76
00:03:59.310 --> 00:04:02.310
Just to make them easier to review I
recommend not writing queries like

77
00:04:02.310 --> 00:04:03.540
a single sentence.

78
00:04:03.540 --> 00:04:05.790
Instead write your keywords
in capital letters and

79
00:04:05.790 --> 00:04:08.780
put each keyword with the clause
that follows it on a separate line.

80
00:04:09.800 --> 00:04:12.700
Some front-end interfaces will
color code keywords for you, but

81
00:04:12.700 --> 00:04:16.460
since interfaces vary, you can't rely
on that to make your queries readable.

82
00:04:16.460 --> 00:04:19.830
As a consequence, writing your queries
on multiple lines is good practice and

83
00:04:19.830 --> 00:04:22.210
is considerate to your co-workers
who will review your code.

84
00:04:23.670 --> 00:04:27.650
SQL has other key words in addition
to the six I already told you about.

85
00:04:27.650 --> 00:04:31.170
Many of these key words are reserved for
functions which are self contained scripts

86
00:04:31.170 --> 00:04:34.830
built into the language that execute
specific computations for you.

87
00:04:34.830 --> 00:04:36.865
Some examples of functions are sum or
count.

88
00:04:37.965 --> 00:04:40.675
Functions can be incorporated into
your queries, and when they are,

89
00:04:40.675 --> 00:04:43.315
for the same readability
reasons I gave you before

90
00:04:43.315 --> 00:04:45.335
it's a good idea to write them
in upper case letters as well.

91
00:04:46.395 --> 00:04:49.105
There's some parts of the query that
should not always be written in upper

92
00:04:49.105 --> 00:04:50.155
case letters though.

93
00:04:50.155 --> 00:04:53.045
In particular,
table names and column names.

94
00:04:53.045 --> 00:04:56.145
Some databases are sensitive to
the case of the column and table names.

95
00:04:56.145 --> 00:05:00.250
So it's a good habit to write the names
exactly as they're stored in the database.

96
00:05:00.250 --> 00:05:03.500
Whenever you need to provide details about
how to distinguish ambiguous names in

97
00:05:03.500 --> 00:05:05.730
a query you can usually use a period.

98
00:05:05.730 --> 00:05:08.640
The period will go between the database
and table names, or the table and

99
00:05:08.640 --> 00:05:11.720
column names to tell the database
exactly which table or column you want.

100
00:05:12.790 --> 00:05:15.670
One more thing you should
know about SQL query syntax

101
00:05:15.670 --> 00:05:20.740
is that SQL treats data entries of zero
differently than data entries of no value.

102
00:05:20.740 --> 00:05:22.710
If a zero is entered in the database,

103
00:05:22.710 --> 00:05:26.590
the database treats the zero as a true
measurement, rather than a lack of data.

104
00:05:26.590 --> 00:05:29.660
To indicate the data's completely missing,
you need to enter the word null.

105
00:05:31.080 --> 00:05:32.760
When data are imported into a database,

106
00:05:32.760 --> 00:05:35.989
missing values will usually be turned
into null entries, rather than zeros.

107
00:05:37.178 --> 00:05:38.650
The general practice I've given you so

108
00:05:38.650 --> 00:05:43.120
far of what SQL syntax looks like is the
same across relational database systems.

109
00:05:43.120 --> 00:05:46.650
However, each database systems does have
its own nuance differences in specific

110
00:05:46.650 --> 00:05:48.330
aspects in the syntax.

111
00:05:48.330 --> 00:05:49.970
Once you learn SQL in one system,

112
00:05:49.970 --> 00:05:52.540
it doesn't take long to learn
a syntax in another system.

113
00:05:52.540 --> 00:05:54.520
The differences will be very small.

114
00:05:54.520 --> 00:05:57.990
That said, expect to be looking up and
double checking syntax often.

115
00:05:57.990 --> 00:06:00.680
Even the best programmers often have
to look up how a function works,

116
00:06:00.680 --> 00:06:03.030
especially when they're working
with a new type of database.

117
00:06:04.150 --> 00:06:07.510
In this course we are giving you the
opportunity to practice writing queries in

118
00:06:07.510 --> 00:06:11.520
two different database management systems
with two different front end interfaces

119
00:06:11.520 --> 00:06:13.690
using two different data sets.

120
00:06:13.690 --> 00:06:17.470
Both of the data sets we will be using
have over a million rows of data.

121
00:06:17.470 --> 00:06:21.078
The first data we will be working with is
from a startup company called Dognition.

122
00:06:21.078 --> 00:06:24.130
If you haven't already you can watch
the meet your Dognition data video that's

123
00:06:24.130 --> 00:06:26.610
describe what this very
interesting company does.

124
00:06:26.610 --> 00:06:29.190
And the business problem they
would like help solving.

125
00:06:29.190 --> 00:06:32.270
The Dognition data set is
stored in a MySQL data base and

126
00:06:32.270 --> 00:06:34.980
we will be interacting with
the different interface called Jupyter.

127
00:06:36.370 --> 00:06:39.150
The second dataset we will be working
with is from a much larger company

128
00:06:39.150 --> 00:06:40.480
called Dillard's.

129
00:06:40.480 --> 00:06:42.950
Dillard's is a department
store in the United States.

130
00:06:42.950 --> 00:06:48.120
And you can watch the MOOC video to learn
more about the data they donated as well.

131
00:06:48.120 --> 00:06:50.890
The Dillard's dataset has
over 100 million rows.

132
00:06:50.890 --> 00:06:54.070
So it will give us a great opportunity
to see what it is like to work with

133
00:06:54.070 --> 00:06:56.220
data of that very large size.

134
00:06:56.220 --> 00:06:59.050
The Dillard's dataset is stored
in the Teradata database.

135
00:06:59.050 --> 00:07:02.170
And we will be interacting with it
through a front-end interface called

136
00:07:02.170 --> 00:07:03.730
Teradata Viewpoint Scratchpad.

137
00:07:04.820 --> 00:07:07.520
The next two videos will show you
how to access both the Jupiter and

138
00:07:07.520 --> 00:07:09.550
the Scratchplate interfaces.

139
00:07:09.550 --> 00:07:12.460
You will be using these interfaces through
the rest of the course to practice putting

140
00:07:12.460 --> 00:07:15.760
the general syntax structure you learned
about in this video into action.